name: Backend CD

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-push:
    name: Build Java application and Push to Docker Hub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate application-private.yml
        run: |
          cd src/main/resources
          echo "${{ secrets.APPLICATION_PRIVATE_YML }}" >> application-private.yml

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

#      - name: Get Current Time
#        uses: josStorer/get-current-time@v2.0.0
#        id: current-time
#        with:
#          format: YYYY-MM-DDTHH-mm-ss
#          utcOffset: "+09:00"
#
#      - name: Show Current Time
#        run: echo "CurrentTime=${{ steps.current-time.outputs.formattedTime }}"

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Run Docker image on Remote server
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_IMAGENAME: ${{ secrets.DOCKER_IMAGENAME }}
          DOCKER_HOST_PORT: ${{ secrets.DOCKER_HOST_PORT }}
          DOCKER_CONTAINER_PORT: ${{ secrets.DOCKER_CONTAINER_PORT }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: DOCKER_USERNAME,DOCKER_IMAGENAME,DOCKER_HOST_PORT,DOCKER_CONTAINER_PORT
          script: |
            sudo docker pull $DOCKER_USERNAME/$DOCKER_IMAGENAME

            CONTAINER_ID=$(sudo docker ps --filter "name=$DOCKER_IMAGENAME" -qa)
            if [ -n "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
              sudo docker image prune -af
            fi

            sudo docker run -d --name $DOCKER_IMAGENAME -p $DOCKER_HOST_PORT:$DOCKER_CONTAINER_PORT $DOCKER_USERNAME/$DOCKER_IMAGENAME